/** 
\page python Matrix Library for Python (mlpy) 

@section compile Compile Python module 

-# cd python <br>
-# make <br> 

Two files are generated: _mlpy.so (shared library) and mlpy.py (package declaration). Copy them to the folder you want to import mlpy from.

@section use_mlpy How to use mlpy module

Five classes are defined:

<b>\ref complex</b> (complex number)<br>
<b>\ref matrix</b> (real and complex double precision matrix)<br>
<b>\ref vector</b> (real and complex double precision vector)<br>

See python/test.py for sample usages.

@subsection complex Complex class

\code
from mlpy import Complex

# a = 3 + 4i
a = Complex(3, 4)

# a = -1 + 0i 
b = Complex(-1)

# This is equivalent to c = b
c = Complex(b)

print "a = ", a
print "b = ", b 
print "c = ", c 

# Conjugate of a
print "a.conj() = ", a.conj()

# Absolute value of a
print "a.abs() = ", a.abs() 

# Real part of a
print "a.real = ", a.real

# Imaginary part of a
print "a.imag = ", a.imag 

print "a + b = ", a + b
print "a + 3 = ", a + 3

print "a - b = ", a - b
print "a - 3 = ", a - 3

print "a * b = ", a * b
print "a * 3 = ", a * 3

print "a / b = ", a / b
print "a / 3 = ", a / 3

\endcode

@subsection matrix Matrix and CMatrix classes

Replace Matrix with CMatrix in following code to use complex matrix. 

\code
from mlpy import Matrix, CMatrix

# Define a matrix of 3 rows (1st parameter) and 3 columns (2nd parameter)
# Row and column indices start from zero
# 
#     x    x    x    (row 0)
#     x    x    x    (row 1)
#     x    x    x    (row 2)
#
# Col 0    1    2
# 
a = Matrix(3, 3)
# or
# a = CMatrix(3, 3)

# Set zero to a's elements
a.clear()

for i in range(0, 3):
  for j in range(0, 3):
    a.set(i, j, i*j+1) # Set a's element at i-th row & j-th row to be i*j+1
print "a = "
print a
print

# Get a's (1,2) element
print "a.get(1, 2) = "
print a.get(1, 2)
print

# Get a copy of a and save to b.
# Direct assignment like 'b = a' does not copy the data
b = a.copy();
b.set(1, 1, 3)
print "b = "
print b
print

print "a + b = "
print a + b
print 

print "a - b = "
print a - b
print 

print "a * b = "
print a * b
print 

print "a * 3 = "
print a * 3 
print 

print "a / 3 = "
print a / 3 
print 

# Get column 2
print "a.get_col(2) = "
print a.get_col(2)
print

# Get row 1
print "a.get_row(1) = "
print a.get_row(1)
print

# Get a block between row 1 (include) to row 3 (not include) and column 0 (include) to column 2 (not include). 
print "a.block(1, 3, 0, 2) = "
print a.block(1, 3, 0, 2)
print

c = Matrix(2, 2)
c.clear()

# Replace the sub matrix with upper-left corner at (1, 0) with matrix c
print "a.replace(1, 0, c) = "
print a.replace(1, 0, c)
print

# Swap column 0 and column 1 
print "a.swap_col(0, 1) = "
print a.swap_col(0, 1)
print

# Swap row 0 and row 1 
print "a.swap_row(0, 1) = "
print a.swap_row(0, 1)
print

# Resize the dimension of a
print "a.resize(2, 2); a = "
a.resize(2, 2)
print a
print

# Get the real part of a matrix
print "a.real() = "
print a.real()
print

# Get the imaginary part of a matrix
print "a.imag() = "
print a.imag()
print

# Get the transpose of a matrix
print "a.trans() = "
print a.trans()
print

# Get the conjugate of a matrix
print "a.conj() = "
print a.conj()
print

# Get the adjoint of a matrix
print "a.adj() = "
print a.adj()
print
\endcode

@subsection vector Vector and CVector classes

Replace Vector with CVector in following code to use complex vector. 

\code
from mlpy import Vector, CVector 

# Define a vector of length 6
a = Vector(6)

# Set zero to all elements of a
a.clear()
for i in range(0, 6):
    a.set(i, i)
print "a = "
print a
print

# Get element 1 
print "a.get(1) = "
print a.get(1)
print

# Copy data of a to vector b
b = a.copy();

# Set element 1 to be 3
b.set(1, 3)
print "b = "
print b
print

print "a + b = "
print a + b
print 

print "a - b = "
print a - b
print 

print "a * b = "
print a * b
print 

print "a * 3 = "
print a * 3 
print 

print "a / 3 = "
print a / 3 
print 

# Sum of all elements
print "a.sum() = "
print a.sum()
print 

# Find the max elements
# max() is undefined for CVector since complex numbers are not comparable
print "a.max() = "
print a.max()
print 

# Calculate the norm of vector a
# norm(a) = sqrt(a_1*a_1 + a_2*a_2 + ...)
print "a.norm() = "
print a.norm()
print 

# Sort a vector
# sort() is undefined for CVector since complex numbers are not comparable
print "b.sort() = "
print b.sort()
print 

# Get the real part of a vector
print "a.real() = "
print a.real()
print

# Get the imaginary part of a vector
print "a.imag() = "
print a.imag()
print
\endcode

*
*/

