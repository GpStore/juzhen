/** 
\page benchmark Benchmarks

@section benchmark_eigen Methodology 

Benchmarking programs were generated by 'make' under benchmark/ directory. 

Graphs on this page show how mlcpp compares to <a href="http://eigen.tuxfamily.org">Eigen</a> (version 3.0-beta2) for small and large matrices - mlcpp runs faster than Eigen in most tests and wins by a wide margin in some others such as element accessing, matrix partitioning and matrix-matrix multiplication (thanks to MKL).

Test environment was Ubuntu 10.10 x86_64 with Xeon 3.73 GHz CPU and 4G memory. Both mlcpp (dynamically linked to MKL) and Eigen were compiled by g++ 4.4.5 with "-DNDEBUG -O3 -msse2".

In the graphs, N is the rank of square matrices and y-axis is running time (lower is better) for 10 operations by default if not mentioned in graph title.

@section benchmark_small Results for small matrices (N<100)

\image html small_0.png
\image html small_1.png
\image html small_2.png
\image html small_3.png
\image html small_4.png
\image html small_5.png
\image html small_6.png
\image html small_7.png
\image html small_8.png
\image html small_9.png
\image html small_10.png
\image html small_11.png
\image html small_12.png
\image html small_13.png
\image html small_14.png
\image html small_15.png
\image html small_16.png

@section benchmark_big Results for large matrices (N>100)

\image html big_0.png
\image html big_1.png
\image html big_2.png
\image html big_3.png
\image html big_4.png
\image html big_5.png
\image html big_6.png
\image html big_7.png
\image html big_8.png
\image html big_9.png
\image html big_10.png
\image html big_11.png
\image html big_12.png
\image html big_13.png
\image html big_14.png
\image html big_15.png
\image html big_16.png

*
*/
